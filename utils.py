import re
from datetime import datetime
from typing import Optional, Tuple
from aiogram.utils.text_decorations import markdown_decoration as md

MONTHS = {
    '—è–Ω–≤–∞—Ä—è': 1,
    '—Ñ–µ–≤—Ä–∞–ª—è': 2,
    '–º–∞—Ä—Ç–∞': 3,
    '–∞–ø—Ä–µ–ª—è': 4,
    '–º–∞—è': 5,
    '–∏—é–Ω—è': 6,
    '–∏—é–ª—è': 7,
    '–∞–≤–≥—É—Å—Ç–∞': 8,
    '—Å–µ–Ω—Ç—è–±—Ä—è': 9,
    '–æ–∫—Ç—è–±—Ä—è': 10,
    '–Ω–æ—è–±—Ä—è': 11,
    '–¥–µ–∫–∞–±—Ä—è': 12,
}

MONTHS_LIST = [
    "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä–µ–ª—è",
    "–º–∞—è",
    "–∏—é–Ω—è",
    "–∏—é–ª—è",
    "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫–∞–±—Ä—è",
]

SHIFT_RE = re.compile(
    r"(?P<day>\d{1,2})\s+(?P<month>[–∞-—è–ê-–Ø]+)(?:\s+(?P<year>\d{4}))?,\s*(?P<start>\d{1,2}:\d{2})\s*[\-\u2013\u2014]\s*(?P<end>\d{1,2}:\d{2})"
)


def parse_shift(text: str) -> Optional[Tuple[datetime, datetime]]:
    match = SHIFT_RE.search(text.strip())
    if not match:
        return None
    day = int(match.group('day'))
    month_name = match.group('month').lower()
    month = MONTHS.get(month_name)
    if not month:
        return None
    year_str = match.group('year')
    year = int(year_str) if year_str else datetime.now().year
    try:
        start_time = datetime.strptime(match.group('start'), '%H:%M').time()
        end_time = datetime.strptime(match.group('end'), '%H:%M').time()
    except ValueError:
        return None
    start = datetime(year, month, day, start_time.hour, start_time.minute)
    end = datetime(year, month, day, end_time.hour, end_time.minute)
    if end <= start:
        return None
    return start, end


STATUS_TEXT = {
    'active': 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞',
    'offered': 'üîÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞',
    'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
}


def format_shift(row: dict) -> str:
    start = datetime.fromisoformat(row['start_time'])
    end = datetime.fromisoformat(row['end_time'])
    status = STATUS_TEXT.get(row['status'], row['status'])
    return (
        f"{row['id']}: {start.day} {MONTHS_LIST[start.month - 1]}, "
        f"{start.strftime('%H:%M')} ‚Äî {end.strftime('%H:%M')} {status}"
    )


def format_shift_short(row: dict) -> str:
    start = datetime.fromisoformat(row['start_time'])
    end = datetime.fromisoformat(row['end_time'])
    return (
        f"{start.day} {MONTHS_LIST[start.month - 1]}, "
        f"{start.strftime('%H:%M')} ‚Äî {end.strftime('%H:%M')}"
    )


def format_shift_time(row: dict) -> str:
    """Return only time range from shift row."""
    start = datetime.fromisoformat(row['start_time'])
    end = datetime.fromisoformat(row['end_time'])
    return f"{start.strftime('%H:%M')} ‚Äî {end.strftime('%H:%M')}"


TIME_RE = re.compile(r"(?P<start>\d{1,2}:\d{2})\s*[\-\u2013\u2014]\s*(?P<end>\d{1,2}:\d{2})")


def parse_time_range(text: str, date: datetime) -> Optional[Tuple[datetime, datetime]]:
    """Parse time range like '10:00-19:00' for a given date."""
    match = TIME_RE.search(text.strip())
    if not match:
        return None
    try:
        s_time = datetime.strptime(match.group('start'), '%H:%M').time()
        e_time = datetime.strptime(match.group('end'), '%H:%M').time()
    except ValueError:
        return None
    start = datetime.combine(date.date(), s_time)
    end = datetime.combine(date.date(), e_time)
    if end <= start:
        return None
    return start, end


def md_escape(text: str) -> str:
    """Escape string for MarkdownV2."""
    return md.quote(text)
